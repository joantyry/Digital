This guide provides step-by-step instructions for provisioning an 
AlmaLinux 9.x virtual machine on Google Cloud Platform (GCP) using 
Terraform (version 1.6.6 or later) in a linux enviroment. The 
configuration includes the following:

1.A 30GB root volume
2.A 15GB volume mounted at /var/lib/docker formatted with XFS
3.A user deployuser (with passwordless sudo) for Ansible
4.10 non-privileged guest accounts (guest01 to guest10)
5.A public IP address assigned to the VM
6.Security group rules to restrict SSH access by IP address
7.System RPM package updates
8.Setting the hostname to devopstest.driirn.ca and timezone to 
Toronto/EST (UTC-5)

A. Prerequisites 

1. Google Cloud Account – 
  (i) Create an account or use existing one - 
https://cloud.google.com/products/compute?hl=en#create-your-first-vm

   (ii) Install Google Cloud Cli
a.$curl -O 
https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-cli-linux-x86_64.tar.gz
b.$tar -xf google-cloud-cli-linux-x86_64.tar.gz
c.$./google-cloud-sdk/install.sh
d.$./google-cloud-sdk/bin/gcloud init
e.$./google-cloud-sdk/bin/gcloud auth application-default login
(iii) Ensure the compute engine api is enabled via the console.
(iv) You can create a new project or use existing one.

2.  Terraform 1.66 or later
  (i) Download - https://developer.hashicorp.com/terraform/install
  For kali-linux download the binary version then unzip it.
  (ii) Verify installation - $terraform –version

3. SSH Key 
   (i) Generate an SSH key pair (~/.ssh/google-compute-engine by default) 
or use existing one.

4. Ansible
   (i) Install Ansible  - $sudo apt update && sudo apt install ansible && 
ansible --version


B. Terraform

Terraform Configuration Files 

1.main.tf - Defines the VM instance , volumes, and networking 
configurations.
a.To customize the volumes, edit the boot-disk and docker-disk 
sizes. 
b.Edit the ssh firewall section <your-public-ip>  to match your 
personal machine’s public ip address. https://whatismyipaddress.com
returns your public ip address. 

2.cloud-init.sh – Formats and mounts /var/lib/docker with xfs, and 
creates users.


Steps to Deploy

1.$terraform init
2.$terraform plan
3.$terraform apply


Verify Deployment

1.SSH into the VM -  $gcloud compute ssh deployuser@almalinux-9-vm 
(This step automatically generates ssh public/private key pair.)
2.Verify disk mounts -  $df -h
3.Verify created users – $cat /etc/passwd
4.Verify deployuser is a passwordless sudoer  - $sudo su && cat 
/etc/sudoers
5.Exit ($exit) twice to log out from the ssh login.
6. Verify assigned vm instance public ip address (outputs the public
ip address) - $terraform output instance_ip
7a.Verify ssh firewall rule (should display the name of the firewall 
rule in the list)- $ gcloud compute firewall-rules list
7b.To test the ssh firewall rule works - Switch to a separate 
network, such as using a mobile hotspot, to simulate an external 
connection. ssh into the vm instance $ssh -i <path-to-sshPrivateKey> deployuser@<vm-instance-public-ip>

If the output is ssh: connect to host <vm-instance-public-ip> port 22: No route to host
then, this confirms that the ssh firewall rule is limiting access to only 
the specified IP address.
 

C. Ansible

Ansible Configuration Files

1.hosts.ini
Contains:
a.Public ip address of the vm instance.
b.The username to be used for ssh.
c.Absolute path to the private key

2.update-packages.yml
a.Updates rpm packages.
b.Sets hostname to devopstest.driirn.ca
c.Sets time zone to Toronto/EST (UTC-5)


Deployment

1.$ansible-playbook -i hosts.ini update-packages.yml

Note:  This deployment will only work if you can ssh into the deployment 
user  account using the following command: - $ssh -i 
~/.ssh/google_compute_engine deployuser@107.178.221.223 (ssh -i 
<path-to-sshPrivateKey> deployuser@<vm-instance-public-ip>)


Verify Deployment

1.SSH as deployuser - $ssh -i <path-to-sshPrivateKey> deployuser@<vm-instance-public-ip>        
2.Hostname  verification - $hostname
3.Timezone verification - $timedatectl
4.rpm packages verification - $rpm -qa

